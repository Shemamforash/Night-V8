// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using UnityEngine;
using System.Collections.Generic;
using Articy.Unity.Interfaces;
using Articy.Unity;
using Articy.Night;

namespace Articy.Night.Features
{
    
    
    [Serializable()]
    public class WeatherFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private String mWeatherName;
        
        [SerializeField()]
        private Single mWeatherTemperatureOffset;
        
        [SerializeField()]
        private Single mWeatherWaterMod;
        
        [SerializeField()]
        private Single mWeatherFoodMod;
        
        [SerializeField()]
        private Single mWeatherDangerMod;
        
        [SerializeField()]
        private Boolean mWeatherFireDanger = new Boolean();
        
        [SerializeField()]
        private Boolean mWeatherWindDanger = new Boolean();
        
        [SerializeField()]
        private Boolean mWeatherFloodDanger = new Boolean();
        
        [SerializeField()]
        private Boolean mWeatherColdDanger = new Boolean();
        
        [SerializeField()]
        private Boolean mWeatherToxicDanger = new Boolean();
        
        [SerializeField()]
        private Single mWeatherVisionModifier;
        
        [SerializeField()]
        private EnumValue mEnumValue = new EnumValue();
        
        public String WeatherName
        {
            get
            {
                return mWeatherName;
            }
            set
            {
                mWeatherName = value;
            }
        }
        
        public Single WeatherTemperatureOffset
        {
            get
            {
                return mWeatherTemperatureOffset;
            }
            set
            {
                mWeatherTemperatureOffset = value;
            }
        }
        
        public Single WeatherWaterMod
        {
            get
            {
                return mWeatherWaterMod;
            }
            set
            {
                mWeatherWaterMod = value;
            }
        }
        
        public Single WeatherFoodMod
        {
            get
            {
                return mWeatherFoodMod;
            }
            set
            {
                mWeatherFoodMod = value;
            }
        }
        
        public Single WeatherDangerMod
        {
            get
            {
                return mWeatherDangerMod;
            }
            set
            {
                mWeatherDangerMod = value;
            }
        }
        
        public Boolean WeatherFireDanger
        {
            get
            {
                return mWeatherFireDanger;
            }
            set
            {
                mWeatherFireDanger = value;
            }
        }
        
        public Boolean WeatherWindDanger
        {
            get
            {
                return mWeatherWindDanger;
            }
            set
            {
                mWeatherWindDanger = value;
            }
        }
        
        public Boolean WeatherFloodDanger
        {
            get
            {
                return mWeatherFloodDanger;
            }
            set
            {
                mWeatherFloodDanger = value;
            }
        }
        
        public Boolean WeatherColdDanger
        {
            get
            {
                return mWeatherColdDanger;
            }
            set
            {
                mWeatherColdDanger = value;
            }
        }
        
        public Boolean WeatherToxicDanger
        {
            get
            {
                return mWeatherToxicDanger;
            }
            set
            {
                mWeatherToxicDanger = value;
            }
        }
        
        public Single WeatherVisionModifier
        {
            get
            {
                return mWeatherVisionModifier;
            }
            set
            {
                mWeatherVisionModifier = value;
            }
        }
        
        public EnumValue EnumValue
        {
            get
            {
                return mEnumValue;
            }
            set
            {
                mEnumValue = value;
            }
        }
        
        private void CloneProperties(object aClone)
        {
            Articy.Night.Features.WeatherFeature newClone = ((Articy.Night.Features.WeatherFeature)(aClone));
            newClone.WeatherName = WeatherName;
            newClone.WeatherTemperatureOffset = WeatherTemperatureOffset;
            newClone.WeatherWaterMod = WeatherWaterMod;
            newClone.WeatherFoodMod = WeatherFoodMod;
            newClone.WeatherDangerMod = WeatherDangerMod;
            newClone.WeatherFireDanger = WeatherFireDanger;
            newClone.WeatherWindDanger = WeatherWindDanger;
            newClone.WeatherFloodDanger = WeatherFloodDanger;
            newClone.WeatherColdDanger = WeatherColdDanger;
            newClone.WeatherToxicDanger = WeatherToxicDanger;
            newClone.WeatherVisionModifier = WeatherVisionModifier;
            newClone.EnumValue = EnumValue;
        }
        
        public object CloneObject()
        {
            Articy.Night.Features.WeatherFeature clone = new Articy.Night.Features.WeatherFeature();
            CloneProperties(clone);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "WeatherName"))
            {
                WeatherName = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "WeatherTemperatureOffset"))
            {
                WeatherTemperatureOffset = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeatherWaterMod"))
            {
                WeatherWaterMod = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeatherFoodMod"))
            {
                WeatherFoodMod = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeatherDangerMod"))
            {
                WeatherDangerMod = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeatherFireDanger"))
            {
                WeatherFireDanger = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeatherWindDanger"))
            {
                WeatherWindDanger = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeatherFloodDanger"))
            {
                WeatherFloodDanger = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeatherColdDanger"))
            {
                WeatherColdDanger = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeatherToxicDanger"))
            {
                WeatherToxicDanger = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeatherVisionModifier"))
            {
                WeatherVisionModifier = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "EnumValue"))
            {
                EnumValue = ((EnumValue)(aValue));
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "WeatherName"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherName);
            }
            if ((aProperty == "WeatherTemperatureOffset"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherTemperatureOffset);
            }
            if ((aProperty == "WeatherWaterMod"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherWaterMod);
            }
            if ((aProperty == "WeatherFoodMod"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherFoodMod);
            }
            if ((aProperty == "WeatherDangerMod"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherDangerMod);
            }
            if ((aProperty == "WeatherFireDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherFireDanger);
            }
            if ((aProperty == "WeatherWindDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherWindDanger);
            }
            if ((aProperty == "WeatherFloodDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherFloodDanger);
            }
            if ((aProperty == "WeatherColdDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherColdDanger);
            }
            if ((aProperty == "WeatherToxicDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherToxicDanger);
            }
            if ((aProperty == "WeatherVisionModifier"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeatherVisionModifier);
            }
            if ((aProperty == "EnumValue"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(EnumValue);
            }
            return null;
        }
        #endregion
    }
}
