// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using UnityEngine;
using System.Collections.Generic;
using Articy.Unity.Interfaces;
using Articy.Unity;
using Articy.Night;

namespace Articy.Night.Features
{
    
    
    [Serializable()]
    public class EnvironmentFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private float mMinTemperature;
        
        [SerializeField()]
        private float mMaxTemperature;
        
        [SerializeField()]
        private float mWaterLevel;
        
        [SerializeField()]
        private float mFoodLevel;
        
        [SerializeField()]
        private float mFuelLevel;
        
        [SerializeField()]
        private float mScrapLevel;
        
        [SerializeField()]
        private float mBanditDanger;
        
        [SerializeField()]
        private float mTerrainAccessibility;
        
        [SerializeField()]
        private float mCampFrequency;
        
        [SerializeField()]
        private float mNormalisedDanger;
        
        public float MinTemperature
        {
            get
            {
                return mMinTemperature;
            }
            set
            {
                mMinTemperature = value;
            }
        }
        
        public float MaxTemperature
        {
            get
            {
                return mMaxTemperature;
            }
            set
            {
                mMaxTemperature = value;
            }
        }
        
        public float WaterLevel
        {
            get
            {
                return mWaterLevel;
            }
            set
            {
                mWaterLevel = value;
            }
        }
        
        public float FoodLevel
        {
            get
            {
                return mFoodLevel;
            }
            set
            {
                mFoodLevel = value;
            }
        }
        
        public float FuelLevel
        {
            get
            {
                return mFuelLevel;
            }
            set
            {
                mFuelLevel = value;
            }
        }
        
        public float ScrapLevel
        {
            get
            {
                return mScrapLevel;
            }
            set
            {
                mScrapLevel = value;
            }
        }
        
        public float BanditDanger
        {
            get
            {
                return mBanditDanger;
            }
            set
            {
                mBanditDanger = value;
            }
        }
        
        public float TerrainAccessibility
        {
            get
            {
                return mTerrainAccessibility;
            }
            set
            {
                mTerrainAccessibility = value;
            }
        }
        
        public float CampFrequency
        {
            get
            {
                return mCampFrequency;
            }
            set
            {
                mCampFrequency = value;
            }
        }
        
        public float NormalisedDanger
        {
            get
            {
                return mNormalisedDanger;
            }
            set
            {
                mNormalisedDanger = value;
            }
        }
        
        private void CloneProperties(object aClone)
        {
            Articy.Night.Features.EnvironmentFeature newClone = ((Articy.Night.Features.EnvironmentFeature)(aClone));
            newClone.MinTemperature = MinTemperature;
            newClone.MaxTemperature = MaxTemperature;
            newClone.WaterLevel = WaterLevel;
            newClone.FoodLevel = FoodLevel;
            newClone.FuelLevel = FuelLevel;
            newClone.ScrapLevel = ScrapLevel;
            newClone.BanditDanger = BanditDanger;
            newClone.TerrainAccessibility = TerrainAccessibility;
            newClone.CampFrequency = CampFrequency;
            newClone.NormalisedDanger = NormalisedDanger;
        }
        
        public object CloneObject()
        {
            Articy.Night.Features.EnvironmentFeature clone = new Articy.Night.Features.EnvironmentFeature();
            CloneProperties(clone);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "MinTemperature"))
            {
                MinTemperature = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "MaxTemperature"))
            {
                MaxTemperature = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WaterLevel"))
            {
                WaterLevel = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "FoodLevel"))
            {
                FoodLevel = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "FuelLevel"))
            {
                FuelLevel = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "ScrapLevel"))
            {
                ScrapLevel = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "BanditDanger"))
            {
                BanditDanger = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "TerrainAccessibility"))
            {
                TerrainAccessibility = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "CampFrequency"))
            {
                CampFrequency = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "NormalisedDanger"))
            {
                NormalisedDanger = System.Convert.ToSingle(aValue);
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "MinTemperature"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(MinTemperature);
            }
            if ((aProperty == "MaxTemperature"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(MaxTemperature);
            }
            if ((aProperty == "WaterLevel"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WaterLevel);
            }
            if ((aProperty == "FoodLevel"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(FoodLevel);
            }
            if ((aProperty == "FuelLevel"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(FuelLevel);
            }
            if ((aProperty == "ScrapLevel"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(ScrapLevel);
            }
            if ((aProperty == "BanditDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(BanditDanger);
            }
            if ((aProperty == "TerrainAccessibility"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(TerrainAccessibility);
            }
            if ((aProperty == "CampFrequency"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(CampFrequency);
            }
            if ((aProperty == "NormalisedDanger"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(NormalisedDanger);
            }
            return null;
        }
        #endregion
    }
}
