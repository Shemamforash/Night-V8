// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using UnityEngine;
using System.Collections.Generic;
using Articy.Unity.Interfaces;
using Articy.Unity;
using Articy.Night;

namespace Articy.Night.Features
{
    
    
    [Serializable()]
    public class Basic_WeaponFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private string mWeaponType;
        
        [SerializeField()]
        private float mWeaponDamage;
        
        [SerializeField()]
        private float mWeaponAccuracy;
        
        [SerializeField()]
        private float mWeaponManouevrability;
        
        [SerializeField()]
        private float mWeaponFireRate;
        
        [SerializeField()]
        private float mWeaponReloadSpeed;
        
        [SerializeField()]
        private int mWeaponCapacity;
        
        [SerializeField()]
        private float mWeaponCriticalChance;
        
        [SerializeField()]
        private bool mWeaponAutomatic = new bool();
        
        [SerializeField()]
        private ArticyValueArticyObject mWeaponPrimaryPrefix = new ArticyValueArticyObject();
        
        [SerializeField()]
        private ArticyValueArticyObject mWeaponSecondaryPrefix = new ArticyValueArticyObject();
        
        [SerializeField()]
        private bool mWeaponAreaEffect = new bool();
        
        [SerializeField()]
        private WeaponRarity mWeaponRarity = new WeaponRarity();
        
        public string WeaponType
        {
            get
            {
                return mWeaponType;
            }
            set
            {
                mWeaponType = value;
            }
        }
        
        public float WeaponDamage
        {
            get
            {
                return mWeaponDamage;
            }
            set
            {
                mWeaponDamage = value;
            }
        }
        
        public float WeaponAccuracy
        {
            get
            {
                return mWeaponAccuracy;
            }
            set
            {
                mWeaponAccuracy = value;
            }
        }
        
        public float WeaponManouevrability
        {
            get
            {
                return mWeaponManouevrability;
            }
            set
            {
                mWeaponManouevrability = value;
            }
        }
        
        public float WeaponFireRate
        {
            get
            {
                return mWeaponFireRate;
            }
            set
            {
                mWeaponFireRate = value;
            }
        }
        
        public float WeaponReloadSpeed
        {
            get
            {
                return mWeaponReloadSpeed;
            }
            set
            {
                mWeaponReloadSpeed = value;
            }
        }
        
        public int WeaponCapacity
        {
            get
            {
                return mWeaponCapacity;
            }
            set
            {
                mWeaponCapacity = value;
            }
        }
        
        public float WeaponCriticalChance
        {
            get
            {
                return mWeaponCriticalChance;
            }
            set
            {
                mWeaponCriticalChance = value;
            }
        }
        
        public bool WeaponAutomatic
        {
            get
            {
                return mWeaponAutomatic;
            }
            set
            {
                mWeaponAutomatic = value;
            }
        }
        
        public ArticyObject WeaponPrimaryPrefix
        {
            get
            {
                return mWeaponPrimaryPrefix.GetValue();
            }
            set
            {
                mWeaponPrimaryPrefix.SetValue(value);
            }
        }
        
        public ArticyObject WeaponSecondaryPrefix
        {
            get
            {
                return mWeaponSecondaryPrefix.GetValue();
            }
            set
            {
                mWeaponSecondaryPrefix.SetValue(value);
            }
        }
        
        public bool WeaponAreaEffect
        {
            get
            {
                return mWeaponAreaEffect;
            }
            set
            {
                mWeaponAreaEffect = value;
            }
        }
        
        public WeaponRarity WeaponRarity
        {
            get
            {
                return mWeaponRarity;
            }
            set
            {
                mWeaponRarity = value;
            }
        }
        
        private void CloneProperties(object aClone)
        {
            Articy.Night.Features.Basic_WeaponFeature newClone = ((Articy.Night.Features.Basic_WeaponFeature)(aClone));
            newClone.WeaponType = WeaponType;
            newClone.WeaponDamage = WeaponDamage;
            newClone.WeaponAccuracy = WeaponAccuracy;
            newClone.WeaponManouevrability = WeaponManouevrability;
            newClone.WeaponFireRate = WeaponFireRate;
            newClone.WeaponReloadSpeed = WeaponReloadSpeed;
            newClone.WeaponCapacity = WeaponCapacity;
            newClone.WeaponCriticalChance = WeaponCriticalChance;
            newClone.WeaponAutomatic = WeaponAutomatic;
            if ((mWeaponPrimaryPrefix != null))
            {
                newClone.mWeaponPrimaryPrefix = ((ArticyValueArticyObject)(mWeaponPrimaryPrefix.CloneObject()));
            }
            if ((mWeaponSecondaryPrefix != null))
            {
                newClone.mWeaponSecondaryPrefix = ((ArticyValueArticyObject)(mWeaponSecondaryPrefix.CloneObject()));
            }
            newClone.WeaponAreaEffect = WeaponAreaEffect;
            newClone.WeaponRarity = WeaponRarity;
        }
        
        public object CloneObject()
        {
            Articy.Night.Features.Basic_WeaponFeature clone = new Articy.Night.Features.Basic_WeaponFeature();
            CloneProperties(clone);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "WeaponType"))
            {
                WeaponType = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "WeaponDamage"))
            {
                WeaponDamage = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeaponAccuracy"))
            {
                WeaponAccuracy = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeaponManouevrability"))
            {
                WeaponManouevrability = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeaponFireRate"))
            {
                WeaponFireRate = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeaponReloadSpeed"))
            {
                WeaponReloadSpeed = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeaponCapacity"))
            {
                WeaponCapacity = System.Convert.ToInt32(aValue);
                return;
            }
            if ((aProperty == "WeaponCriticalChance"))
            {
                WeaponCriticalChance = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "WeaponAutomatic"))
            {
                WeaponAutomatic = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeaponPrimaryPrefix"))
            {
                WeaponPrimaryPrefix = ((ArticyObject)(aValue));
                return;
            }
            if ((aProperty == "WeaponSecondaryPrefix"))
            {
                WeaponSecondaryPrefix = ((ArticyObject)(aValue));
                return;
            }
            if ((aProperty == "WeaponAreaEffect"))
            {
                WeaponAreaEffect = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "WeaponRarity"))
            {
                WeaponRarity = ((WeaponRarity)(aValue));
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "WeaponType"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponType);
            }
            if ((aProperty == "WeaponDamage"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponDamage);
            }
            if ((aProperty == "WeaponAccuracy"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponAccuracy);
            }
            if ((aProperty == "WeaponManouevrability"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponManouevrability);
            }
            if ((aProperty == "WeaponFireRate"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponFireRate);
            }
            if ((aProperty == "WeaponReloadSpeed"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponReloadSpeed);
            }
            if ((aProperty == "WeaponCapacity"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponCapacity);
            }
            if ((aProperty == "WeaponCriticalChance"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponCriticalChance);
            }
            if ((aProperty == "WeaponAutomatic"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponAutomatic);
            }
            if ((aProperty == "WeaponPrimaryPrefix"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponPrimaryPrefix);
            }
            if ((aProperty == "WeaponSecondaryPrefix"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponSecondaryPrefix);
            }
            if ((aProperty == "WeaponAreaEffect"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponAreaEffect);
            }
            if ((aProperty == "WeaponRarity"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(WeaponRarity);
            }
            return null;
        }
        #endregion
    }
}
